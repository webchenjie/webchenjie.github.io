(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{595:function(t,e,r){"use strict";r.r(e);var a=r(2),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[t._v("转化（transform）AST，得到 JS AST，中间会经过很多转换方法，得到 codegenNode，这个在后面 generate 时会用到")]),t._v(" "),e("h2",{attrs:{id:"转换策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转换策略"}},[t._v("#")]),t._v(" 转换策略")]),t._v(" "),e("p",[t._v("我们知道从 AST 转化为 JS AST 本质上是一个对象结构的变化，变化的本质是为了后面更方便的解析对象，生成 render 函数")]),t._v(" "),e("p",[t._v("在转化的过程中，我们需要遵循如下策略：")]),t._v(" "),e("ul",[e("li",[t._v("深度优先")]),t._v(" "),e("li",[t._v("转化函数分离（针对不同的类型使用不同的方法进行转化）")]),t._v(" "),e("li",[t._v("上下文对象")])]),t._v(" "),e("h2",{attrs:{id:"过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[t._v("#")]),t._v(" 过程")]),t._v(" "),e("ul",[e("li",[t._v("递归解析 AST，对不同的节点进行不同的逻辑操作")]),t._v(" "),e("li",[t._v("根据不同类型进行不同的解析\n"),e("ul",[e("li",[t._v("比如对标签的内容的处理：会合并模板的差值表达式")]),t._v(" "),e("li",[t._v("比如对标签的处理：生成 codegenNode，并把对应要生成的方法存储起来，不同类型的标签会有不同的方法进行存储，后面的 generate 会取出来进行拼接字符串，即把对应的方法拼接到 render 中去声明")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);