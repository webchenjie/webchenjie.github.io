(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{554:function(t,e,v){"use strict";v.r(e);var a=v(2),_=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[t._v("render 函数的作用就是根据 vnode 去渲染对应的 DOM 元素，其中会根据 vnode 中的类型去创建不同的 DOM 节点")]),t._v(" "),e("p",[t._v("新旧节点的所有挂载和更新情况，可以被分为九种场景：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("旧节点为纯文本时：")]),t._v(" "),e("ul",[e("li",[t._v("新节点为纯文本：执行文本替换操作")]),t._v(" "),e("li",[t._v("新节点为空：删除旧节点")]),t._v(" "),e("li",[t._v("新节点为数组：清空文本，添加多个新节点")])])]),t._v(" "),e("li",[e("p",[t._v("旧节点为空时：")]),t._v(" "),e("ul",[e("li",[t._v("新节点为纯文本：添加新节点")]),t._v(" "),e("li",[t._v("新节点为空：不做任何事情")]),t._v(" "),e("li",[t._v("新节点为数组时：添加多个新节点")])])]),t._v(" "),e("li",[e("p",[t._v("旧节点为数组时：")]),t._v(" "),e("ul",[e("li",[t._v("新节点为纯文本：删除所有旧节点，添加新节点")]),t._v(" "),e("li",[t._v("新节点为空：删除所有旧节点")]),t._v(" "),e("li",[t._v("新节点为数组时：进行 diff 操作")])])])]),t._v(" "),e("h2",{attrs:{id:"过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[t._v("#")]),t._v(" 过程")]),t._v(" "),e("p",[t._v("DOM 环境下使用的 API：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("创建节点：document.createElement(type)")])]),t._v(" "),e("li",[e("p",[t._v("设置节点内容：el.textContent = text")])]),t._v(" "),e("li",[e("p",[t._v("挂载节点： el.insertBefore(child)")])])]),t._v(" "),e("h3",{attrs:{id:"元素节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素节点"}},[t._v("#")]),t._v(" 元素节点")]),t._v(" "),e("h4",{attrs:{id:"挂载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#挂载"}},[t._v("#")]),t._v(" 挂载")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("如果新节点是空的并且旧节点存在，则会执行删除动作")])]),t._v(" "),e("li",[e("p",[t._v("触发 patch 方法，根据 vnode 中的 type 和 shapeFlag 的值来确定要进行哪种类型的节点挂载（shapeFlag 使用 "),e("code",[t._v("按位与")]),t._v(" 运算计算）")])])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("按位与")]),t._v(" 运算可以简单理解为是把数值变成 32 位的二进制进行相比，只有两个都为 1 结果才是 1，否则就是 0，然后再把二进制转为十进制")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("确定了类型，就可以进行挂载操作，挂载函数会判断是否有旧节点，如果有则是更新，如果没有则是挂载")])]),t._v(" "),e("li",[e("p",[t._v("挂载逻辑")]),t._v(" "),e("ul",[e("li",[t._v("生成 DOM 标签")]),t._v(" "),e("li",[t._v("生成标签中的内容")]),t._v(" "),e("li",[t._v("处理 props（class/style）")]),t._v(" "),e("li",[t._v("挂载节点")])])]),t._v(" "),e("li",[e("p",[t._v("挂载后会把当前的 vnode 保存在 DOM 元素上，标识为旧节点")])])]),t._v(" "),e("h4",{attrs:{id:"更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新"}},[t._v("#")]),t._v(" 更新")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("触发 patchElement 方法，在里面主要更新子节点和更新 props")])]),t._v(" "),e("li",[e("p",[t._v("如果新旧两个节点的 type 和 key 相同，则会认为是同一个节点，如果是不同类型的节点进行更新，会直接把旧节点进行删除，然后进行新节点的挂载")])]),t._v(" "),e("li",[e("p",[t._v("diff 算法出现的场景是旧节点是多个子节点并且新节点也是多个字节点的场景")])])]),t._v(" "),e("h3",{attrs:{id:"文本节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文本节点"}},[t._v("#")]),t._v(" 文本节点")]),t._v(" "),e("ul",[e("li",[t._v("挂载： document.createTextNode(text) + el.insertBefore(child)")]),t._v(" "),e("li",[t._v("更新：document.nodeValue = text")])]),t._v(" "),e("h3",{attrs:{id:"注释节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注释节点"}},[t._v("#")]),t._v(" 注释节点")]),t._v(" "),e("ul",[e("li",[t._v("挂载： document.createComment(text) + el.insertBefore(child)")]),t._v(" "),e("li",[t._v("更新：n1.el = n2.el（n1 是旧节点、n2 是新节点）")])]),t._v(" "),e("h3",{attrs:{id:"片段节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#片段节点"}},[t._v("#")]),t._v(" 片段节点")]),t._v(" "),e("ul",[e("li",[t._v("挂载：会遍历里面的子 节点生成为文本节点进行挂载")]),t._v(" "),e("li",[t._v("更新：el.textContent = text")])]),t._v(" "),e("h3",{attrs:{id:"组件节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件节点"}},[t._v("#")]),t._v(" 组件节点")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("挂载")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("创建出组件的实例对象，对象里面的 vnode 属性指向 vnode，vnode 里面的 components 属性指向这个实例对象")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("uid")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vnode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 组件 vnode 的类型")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("subTree")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行 render 函数返回的 vnode")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("effect")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("update")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("render")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 组件的 render 函数")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("执行 vnode 中的 type 属性对象的 render 函数得到新的 vnode")]),t._v(" "),e("ul",[e("li",[t._v("执行 render 函数使用 call 方式，把 this 指向了当前组件的实例")])])]),t._v(" "),e("li",[e("p",[t._v("触发 patch 函数进行挂载")])])])]),t._v(" "),e("li",[e("p",[t._v("更新")]),t._v(" "),e("ul",[e("li",[t._v("实际上就是把旧组件的 DOM 节点直接移除，然后再把新的组件节点进行挂载")]),t._v(" "),e("li",[t._v("组件中依赖的数据发生变化的时候，实际上就是重新执行了 render 函数获取到最新的 vnode 再进行挂载")])])])]),t._v(" "),e("h4",{attrs:{id:"有状态组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有状态组件"}},[t._v("#")]),t._v(" 有状态组件")]),t._v(" "),e("ul",[e("li",[t._v("执行 data 的函数得到对象，使用 reavtive 把 data 进行包装，变成响应式数据")]),t._v(" "),e("li",[t._v("配合执行 render 函数时的 call 方法实现对应值的获取")])]),t._v(" "),e("h3",{attrs:{id:"属性相关的操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性相关的操作"}},[t._v("#")]),t._v(" 属性相关的操作")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("class 和其他属性的挂载逻辑")]),t._v(" "),e("ul",[e("li",[t._v("如果是 class，则通过 el.className 挂载")]),t._v(" "),e("li",[t._v("实际上 class 的设置可以通过 el.className 和 el.setAttribute 进行设置，Vue 使用 el.className 设置的原因是 className 比 setAttribute 的性能要好")])])]),t._v(" "),e("li",[e("p",[t._v("style 属性挂载逻辑")]),t._v(" "),e("ul",[e("li",[t._v("如果是 '--' 开头的，则认为是 CSS 变量，会使用 style.setProperty 进行挂载")]),t._v(" "),e("li",[t._v("如果是 style 和 class 逻辑差不多，都是循环遍历通过 el.style.xxx = xxx 进行赋值")]),t._v(" "),e("li",[t._v("赋值后会缓存 style 的值，如果后面再次改变了 style，会判断新的 style 有没有包含旧的 style，如果没有，则会把旧的进行移除")])])]),t._v(" "),e("li",[e("p",[t._v("其他属性的挂载逻辑")]),t._v(" "),e("ul",[e("li",[t._v("如果是 value，则通过 el.value 挂载")]),t._v(" "),e("li",[t._v("如果是 el 中的某个属性（key in el），则通过 el[key] = xxx 挂载")]),t._v(" "),e("li",[t._v("如果是其他属性，则通过 el.setAttribute 挂载")])])]),t._v(" "),e("li",[e("p",[t._v("事件的挂载逻辑")]),t._v(" "),e("ul",[e("li",[t._v("本质通过 addEventListener 进行事件添加，通过 removeEventListener 进行事件移除")]),t._v(" "),e("li",[t._v("会过滤掉 onUpdate 的事件，这个是 v-model 的事件")]),t._v(" "),e("li",[t._v("在事件中，Vue 通过 vei 即 vue event invokers 进行事件回调缓存，如果是同一个事件，一开始的回调函数是 A，后面改成了回调函数 B，这种情况不会进行多次 add 和 remove，而是通过改变 vei 中的回调函数，因为 add 和 remove 会消耗性能")])])])]),t._v(" "),e("h3",{attrs:{id:"生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),e("ul",[e("li",[t._v("在解析组件之前会直接触发 beforeCreate，解析之后会触发 create")]),t._v(" "),e("li",[t._v("其他的生命周期则是会注册到一个对象缓存中，其中还会处理多个同一种生命周期的判断，即数组形式循环触发调用")]),t._v(" "),e("li",[t._v("在生命周期回调中去访问响应式数据是通过 bind 函数改变了 this 指向进行获取的")])]),t._v(" "),e("h3",{attrs:{id:"setup-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setup-函数"}},[t._v("#")]),t._v(" setup 函数")]),t._v(" "),e("ul",[e("li",[t._v("如果有 setup 函数，则会执行拿到返回结果即 render 函数，然后把这个 render 函数赋值给组件的 render 函数，这样就完成了 setup 的挂载")])]),t._v(" "),e("h3",{attrs:{id:"diff-算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diff-算法"}},[t._v("#")]),t._v(" diff 算法")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("只有新旧两个节点都是多个子元素即数组形式才会进入 diff，判断是否是同一个节点是根据节点的类型和 key 两者是否一样")])]),t._v(" "),e("li",[e("p",[t._v("diff 指的是：添加、删除、打补丁、移动这四个行为")])]),t._v(" "),e("li",[e("p",[t._v("有以下五种场景，按顺序执行（定义变量 i 进行循环，两个数组取值进行比较）")])])]),t._v(" "),e("h4",{attrs:{id:"_1-自前向后的比对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-自前向后的比对"}},[t._v("#")]),t._v(" 1. 自前向后的比对")]),t._v(" "),e("ul",[e("li",[t._v("旧节点：a、b、c")]),t._v(" "),e("li",[t._v("新节点：a、b、d")])]),t._v(" "),e("p",[t._v("这种情况就是先从 a 和 a 比，b 和 b 比，c 和 d 比，如果中间有一个没有匹配上则会进入下一个场景的比对")]),t._v(" "),e("h4",{attrs:{id:"_2-自后向前的比对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-自后向前的比对"}},[t._v("#")]),t._v(" 2. 自后向前的比对")]),t._v(" "),e("ul",[e("li",[t._v("旧节点：c、b、a")]),t._v(" "),e("li",[t._v("新节点：d、b、a")])]),t._v(" "),e("p",[t._v("这种情况就是先从 a 和 a 比，b 和 b 比，c 和 d 比，如果中间有一个没有匹配上则会进入下一个场景的比对")]),t._v(" "),e("h4",{attrs:{id:"_3-新节点比旧节点多时的比对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-新节点比旧节点多时的比对"}},[t._v("#")]),t._v(" 3. 新节点比旧节点多时的比对")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("新节点在后面")]),t._v(" "),e("ul",[e("li",[t._v("旧节点：a、b")]),t._v(" "),e("li",[t._v("新节点：a、b、c")])])]),t._v(" "),e("li",[e("p",[t._v("新节点在前面")]),t._v(" "),e("ul",[e("li",[t._v("旧节点：a、b")]),t._v(" "),e("li",[t._v("新节点：c、a、b")])])])]),t._v(" "),e("p",[t._v("这两种情况都是从新节点中获取到要插入的节点，然后拿到锚点（即要插入哪个节点的前面）进行插入")]),t._v(" "),e("h4",{attrs:{id:"_4-旧节点比新节点多时的比对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-旧节点比新节点多时的比对"}},[t._v("#")]),t._v(" 4. 旧节点比新节点多时的比对")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("新节点在后面")]),t._v(" "),e("ul",[e("li",[t._v("旧节点：a、b、c")]),t._v(" "),e("li",[t._v("新节点：a、b")])])]),t._v(" "),e("li",[e("p",[t._v("新节点在前面")]),t._v(" "),e("ul",[e("li",[t._v("旧节点：c、a、b")]),t._v(" "),e("li",[t._v("新节点：a、b")])])])]),t._v(" "),e("p",[t._v("这两种情况都是把旧节点进行删除")]),t._v(" "),e("h4",{attrs:{id:"_5-乱序比对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-乱序比对"}},[t._v("#")]),t._v(" 5. 乱序比对")]),t._v(" "),e("ul",[e("li",[t._v("这边需要先搞明白一个概念："),e("code",[t._v("最长递增子序列")]),t._v("，它可以减少移动场景的计算")])]),t._v(" "),e("blockquote",[e("p",[t._v("最长递增子序列：在一个给定的数值序列中，找到一个子序列，使得这个子序列元素的数值依次递增，并且这个子序列的长度尽可能得大")])]),t._v(" "),e("p",[t._v("例子：有个节点是 1,3,2,4,6,5，而这个节点的递增子序列可以是以下几个结果，其中最长的就是 "),e("code",[t._v("最长递增子序列")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("结果 1：1,3,6")])]),t._v(" "),e("li",[e("p",[t._v("结果 2：1,2,4,6")])]),t._v(" "),e("li",[e("p",[t._v("结果 3：...")])])]),t._v(" "),e("p",[t._v("比对过程：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("旧节点：a、b、c、d、e")])]),t._v(" "),e("li",[e("p",[t._v("新节点：a、c、b、f、e")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("生成新节点的 key 和新节点的位置（即下标）的 map 对象")])]),t._v(" "),e("li",[e("p",[t._v("循环旧节点，并尝试进行 patch（打补丁）或 unmount（删除）旧节点")])]),t._v(" "),e("li",[e("p",[t._v("针对移动和挂载的处理")]),t._v(" "),e("ul",[e("li",[t._v("这边会生成 "),e("code",[t._v("最长递增子序列")]),t._v(" 的下标数组进行计算移动")])])])])])])])}),[],!1,null,null,null);e.default=_.exports}}]);