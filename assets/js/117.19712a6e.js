(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{544:function(e,t,l){"use strict";l.r(t);var c=l(2),u=Object(c.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),t("p",[e._v("创建 ComputedRefImpl 实例，然后返回，和 ref 的 RefImpl 类似，主要通过 ReactiveEffect 中的优先执行 computed 的 effect 逻辑来触发 schedule 调度器，在调度器中会再次触发对应的依赖，就会执行使用 computed 的 run 函数")]),e._v(" "),t("h2",{attrs:{id:"过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[e._v("#")]),e._v(" 过程")]),e._v(" "),t("ul",[t("li",[e._v("ComputedRefImpl 中通过 dirty 变量来控制 run 的执行和 triggerRefValue 的触发")]),e._v(" "),t("li",[e._v("想要访问计算属性的值，必须通过 .value，因为它内部和 ref 一样是通过 get value 来进行实现的")]),e._v(" "),t("li",[e._v("每次 .value 时都会触发 trackRefValue 即依赖收集")]),e._v(" "),t("li",[e._v("在依赖触发时，是先触发 computed 的 effect，再触发非 computed 的 effect\n"),t("ul",[t("li",[e._v("effect 的 ReactiveEffect 中的 schedule 调度器（调度器会再触发依赖）和 computed 属性搭配使用")]),e._v(" "),t("li",[e._v("即先触发 computed 的 effect，然后执行 schedule 调度器")]),e._v(" "),t("li",[e._v("然后执行非 computed 的 effect，执行 run 函数即 fn")]),e._v(" "),t("li",[e._v("也就是说 computed 中会触发多次依赖触发的操作")])])])])])}),[],!1,null,null,null);t.default=u.exports}}]);