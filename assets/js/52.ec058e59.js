(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{478:function(i,v,e){"use strict";e.r(v);var r=e(2),t=Object(r.a)({},(function(){var i=this,v=i._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[v("h2",{attrs:{id:"什么是-js-bridge"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是-js-bridge"}},[i._v("#")]),i._v(" 什么是 JS Bridge?")]),i._v(" "),v("ol",[v("li",[i._v("JS 无法直接调用 native API，即 App 的 API")]),i._v(" "),v("li",[i._v("需要通过一些特定的"),v("code",[i._v("格式")]),i._v("来调用")]),i._v(" "),v("li",[i._v("这些"),v("code",[i._v("格式")]),i._v("就统称 JS-Bridge，例如微信 JSSDK")])]),i._v(" "),v("h2",{attrs:{id:"概念理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念理解"}},[i._v("#")]),i._v(" 概念理解")]),i._v(" "),v("ol",[v("li",[i._v("一个操作系统即 OS 下会有多个 App")]),i._v(" "),v("li",[i._v("一个 App 中会有一个 webview 组件，用来承载网页展示")]),i._v(" "),v("li",[i._v("如微信 App 可以打开网页，其实它有一个 webview 的组件来承载")]),i._v(" "),v("li",[i._v("如 chrome 浏览器，它其实也是一个 App，只不过是一个以 webview 为主的 App")])]),i._v(" "),v("h2",{attrs:{id:"js-bridge-的原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js-bridge-的原理"}},[i._v("#")]),i._v(" JS Bridge 的原理")]),i._v(" "),v("ol",[v("li",[i._v("App 会往 webview 组件去提供封装好丰富的 API")]),i._v(" "),v("li",[i._v("JS 再去调用对应的 API")]),i._v(" "),v("li",[i._v("中间这个提供封装好丰富的 API 就是 JS Bridge")]),i._v(" "),v("li",[i._v("注意：如果有涉及到网络请求的 API，会先到 App 层面，再由 App 进行处理")])]),i._v(" "),v("h2",{attrs:{id:"js-bridge-常见的方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js-bridge-常见的方式"}},[i._v("#")]),i._v(" JS Bridge 常见的方式")]),i._v(" "),v("ol",[v("li",[i._v("注册全局 API")]),i._v(" "),v("li",[i._v("URL Scheme")])]),i._v(" "),v("h2",{attrs:{id:"android、ios-和-web-双向通讯的对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#android、ios-和-web-双向通讯的对比"}},[i._v("#")]),i._v(" Android、iOS 和 Web 双向通讯的对比")]),i._v(" "),v("ol",[v("li",[v("p",[i._v("相同点：")]),i._v(" "),v("ol",[v("li",[i._v("都是通过 WebView 来完成网页的加载")]),i._v(" "),v("li",[i._v("都是通过向 Window 注入对象的方式来提供可被 Web 端调用的方法")]),i._v(" "),v("li",[i._v("都可以直接调用 Web 端挂载到 window 对象下的方法")])])]),i._v(" "),v("li",[v("p",[i._v("不同点：")]),i._v(" "),v("ol",[v("li",[i._v("注入对象不同：Android 可提供注入对象名，iOS 固定为 webkit")]),i._v(" "),v("li",[i._v("Js 调用 Native 方式不同：\n"),v("ol",[v("li",[i._v("面向 Android 可直接获取注入对象，调用方法")]),i._v(" "),v("li",[i._v("面向 iOS 为相对固定写法：window.webkit.messageHandlers.方法名.postMessage('入参对象')")])])]),i._v(" "),v("li",[i._v("传递数据格式不同：\n"),v("ol",[v("li",[i._v("面向 Android 只能接受基本类型数据")]),i._v(" "),v("li",[i._v("面向 iOS 可以接受任意类型数据")])])]),i._v(" "),v("li",[i._v("返回值不同：\n"),v("ol",[v("li",[i._v("面向 Android 可以直接接收返回值")]),i._v(" "),v("li",[i._v("面向 iOS 没有办法直接获取返回值，需要通过 js 回调")])])])])])]),i._v(" "),v("h2",{attrs:{id:"dsbridge-原理解析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dsbridge-原理解析"}},[i._v("#")]),i._v(" DSBridge 原理解析")]),i._v(" "),v("h3",{attrs:{id:"android"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#android"}},[i._v("#")]),i._v(" Android")]),i._v(" "),v("p",[i._v("Android 向 window 注入了 _dsbridge 对象，里面有 call 方法，用于 browser 和 native 之间的通讯")]),i._v(" "),v("h3",{attrs:{id:"ios"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ios"}},[i._v("#")]),i._v(" iOS")]),i._v(" "),v("p",[i._v("iOS 拦截了 prompt('_dsbridge=method', arg) 这个弹框内容，解析里面的 method 和 arg，用于 browser 和 native 之间的通讯")]),i._v(" "),v("h3",{attrs:{id:"具体调用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#具体调用"}},[i._v("#")]),i._v(" 具体调用")]),i._v(" "),v("p",[i._v("browser ==> native 即通过上述方法进行调用")]),i._v(" "),v("p",[i._v("native ==> browser 需要 browser 先调用 register 方法，native 把对应的方法进行存储，然后 native 在特定的时期进行调用指定的方法名即实现调用，其 register 方法的原理也是上述方法进行调用")]),i._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"title"}),v("p",[i._v("作者：chenjie "),v("br"),i._v("\n链接：https://webchenjie.cn "),v("br"),i._v("\n来源：ChenJieBlog")])])])}),[],!1,null,null,null);v.default=t.exports}}]);